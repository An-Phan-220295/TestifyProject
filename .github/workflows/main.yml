name: Testify Project

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 220295
          POSTGRES_DB: testify
        # container sẽ có hostname là "postgres"
        options: >-
          --health-cmd="pg_isready -U postgres -d testify"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30   # tăng retries để Postgres có thời gian khởi động

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "oracle"
          cache: maven

      - name: Wait for PostgreSQL
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          # chờ tối đa 3 phút (90 * 2s); có thể tăng nếu cần
          COUNT=0
          until pg_isready -q -h postgres -p 5432 -U postgres -d testify; do
            echo "Waiting for PostgreSQL..."
            sleep 2
            COUNT=$((COUNT+1))
            if [ $COUNT -ge 90 ]; then
              echo "Timeout waiting for Postgres."
              exit 1
            fi
          done
          echo "Postgres is ready."

      # === Bước debug sau Wait (phương án A) ===
      - name: Debug Postgres if not healthy
        run: |
          set +e
          pg_isready -h postgres -p 5432 -U postgres -d testify
          READY=$?
          set -e
          if [ $READY -ne 0 ]; then
            echo "Postgres still not ready. Dumping container info & logs..."
            docker ps -a || true
            cid=$(docker ps -aq --filter "ancestor=postgres:14" | head -n1)
            if [ -n "$cid" ]; then
              echo "== Health status =="
              docker inspect "$cid" --format '{{json .State.Health}}' || true
              echo "== Last 200 logs =="
              docker logs --tail=200 "$cid" || true
            else
              echo "Could not find postgres container by ancestor filter."
            fi
            exit 1
          else
            echo "Postgres is accepting connections."
          fi

      - name: Build with Maven
        working-directory: ./TestifyProject/backend/TestifyProject
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testify
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: 220295
          SPRING_JPA_HIBERNATE_DDL_AUTO: update
        run: mvn -B clean install

      - name: Run tests
        working-directory: ./TestifyProject/backend/TestifyProject
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testify
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: 220295
          SPRING_PROFILES_ACTIVE: test
        run: mvn -B test
